2017.12.02
//    public func getPlayerItem(_ urlString:String, player:AVPlayer?,  playerItem: AVPlayerItem?)->AVPlayerItem?{
//        var player = player
//        var playerItem = playerItem
//        if let url = URL(string: urlString) {
//            let audioUrl = url
//            let asset = AVURLAsset(url: audioUrl)
//            playerItem = AVPlayerItem(asset: asset)
//
//            if player != nil {
//                print("item player exist")
//            }else {
//                print("item player do not exist")
//                player = AVPlayer()
//            }
//
//            let statusType = IJReachability().connectedToNetworkOfType()
//            if statusType == .wiFi {
//                player?.replaceCurrentItem(with: playerItem)
//            }
//            return playerItem!
//        }
//        return nil
//    }
判断本地文件
//        if audioUrlString != "" {
//            if let localAudioFile = download.checkDownloadedFileInDirectory(download.getFileName(urlString: audioUrlString)+body["title"]!, directoryName: "audioDirectory", for: .cachesDirectory){
//
////                audioUrl = URL(fileURLWithPath: localAudioFile)
//            }else{
//                audioUrlString = playerAPI.parseAudioUrl(urlString: audioUrlString)
//                if let url = URL(string: audioUrlString){
//                    audioUrl = url
//                }
//            }
//        }
fetchResults变成json数据
//    public func getJsonData(fetchResults:[ContentSection]?) {
//        var contentItem = [String:Any]()
//        var contentSection = [String:Any]()
//        var pageData = [ContentItem]()
//        if let fetchResults = fetchResults{
//            for (sectionIndex, section) in (fetchResults.enumerated()) {
//                contentSection["title"] = section.title
//                contentSection["adid"] = section.adid
//                contentSection["items"] = section.items
//                contentSection["type"] = section.type
//                for (itemIndex, item) in section.items.enumerated() {
//                    item.adchId
//
//                    pageData.append(item)
//
//                }
//            }
//        }
//
//    }
下载图片
//            if let downLoadEndBtn = UIImage(named:buttonImageName){
                //
//                let downLoadEndBtnWidth = downLoadEndBtn.size.width
//                let downLoadEndBtnHeight = downLoadEndBtn.size.height
                self.frame.size.width = CGFloat(downLoadEndBtnWidth)
                self.frame.size.height = CGFloat(downLoadEndBtnHeight)
                
                //                print("downLoadEndBtnHeight111---\(downLoadEndBtnHeight)--downLoadEndBtnWidth:\(downLoadEndBtnWidth)")
//            }

views include--Optional([<UINavigationTransitionView: 0x7ff30e71c840; frame = (0 0; 375 667); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x6040002320c0>>, <UINavigationBar: 0x7ff30e70a300; frame = (0 20; 375 44); autoresize = W; tintColor = UIExtendedSRGBColorSpace 0.2 0.2 0.2 1; layer = <CALayer: 0x60400022a1e0>>, <FTCC.CustomSmallPlayView: 0x7ff30e40caf0; frame = (0 577; 375 90); hidden = YES; layer = <CALayer: 0x60000023c080>>])

views include--Optional([<UITransitionView: 0x7fdb25647690; frame = (0 0; 375 667); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x60400022a120>>, <UITabBar: 0x7fdb25411050; frame = (0 618; 375 49); autoresize = W+TM; tintColor = UIExtendedSRGBColorSpace 0.752941 0.156863 0.180392 1; gestureRecognizers = <NSArray: 0x6040004450a0>; layer = <CALayer: 0x604000220340>>, <UIView: 0x7fdb25420330; frame = (0 0; 375 667); autoresize = W+H; layer = <CALayer: 0x60000042fbe0>>])

views include--Optional([<UITransitionView: 0x7fbeade11b10; frame = (0 0; 375 667); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x604000238f80>>, <UITabBar: 0x7fbeadc14ce0; frame = (0 618; 375 49); autoresize = W+TM; tintColor = UIExtendedSRGBColorSpace 0.752941 0.156863 0.180392 1; gestureRecognizers = <NSArray: 0x60000044dce0>; layer = <CALayer: 0x60400022b640>>, <UIView: 0x7fbeadf3b210; frame = (0 0; 375 667); autoresize = W+H; layer = <CALayer: 0x600000227b80>>, <Page.CustomSmallPlayView: 0x7fbeade0a760; frame = (0 577; 375 90); layer = <CALayer: 0x60000003e1e0>>])

    @objc func openAudio(){
        if let audioPlayerController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "AudioPlayerController") as? AudioPlayerController {
            let tabItem = TabBarAudioContent.sharedInstance.item
            if let tabItem = tabItem ,let audioFileUrl = tabItem.caudio {
                TabBarAudioContent.sharedInstance.body["title"] = tabItem.headline
                TabBarAudioContent.sharedInstance.body["audioFileUrl"] = audioFileUrl
                TabBarAudioContent.sharedInstance.body["interactiveUrl"] = "/index.php/ft/interactive/\(tabItem.id)"
                audioPlayerController.item = tabItem
            }
            audioPlayerController.modalPresentationStyle = .custom
            self.present(audioPlayerController, animated: true, completion: nil)

//          self.pushViewController(audioPlayerController, animated: false)
        }
        self.navigationBar.barStyle = .black
    }

            let controller = UIApplication.shared.keyWindow?.rootViewController
        let views = controller?.view.subviews
        print("views include--\(String(describing: views))")

2017.12.03
extension UIViewController{
    func showTabPlay(isShouldHide:Bool){
        let customNavigation = self.navigationController as? CustomNavigationController
        if  let tabAudioView = customNavigation?.tabView{
            if isShouldHide == false{
                tabAudioView.isHidden = false
                let deltaY = tabAudioView.bounds.height
                UIView.animate(withDuration: 1, delay: 0, options: UIViewAnimationOptions.curveEaseIn, animations: {
                    tabAudioView.transform = CGAffineTransform(translationX: 0,y: deltaY)
                    tabAudioView.setNeedsUpdateConstraints()
                }, completion: { (true) in
                    
                })
            }else{
                tabAudioView.isHidden = true
            }
        }
    }

}

        class openPlayController:UIViewController{
    var tabView = CustomSmallPlayView()
    override func viewDidLoad() {
        super.viewDidLoad()
        let width = UIScreen.main.bounds.width
        let height = self.view.bounds.height
        
        var homeTabBarHeight: CGFloat = 0
        
        homeTabBarHeight = UIDevice.current.setDifferentDeviceLayoutValue(iphoneXValue: 124, OtherIphoneValue: 90)
        
        tabView.backgroundColor = UIColor(hex: "12a5b3", alpha: 0.5)
        tabView.frame = CGRect(x:0,y:height - homeTabBarHeight,width:width,height:homeTabBarHeight)
        view.addSubview(self.tabView)
        tabView.playAndPauseButton.addTarget(self, action: #selector(pauseOrPlay), for: UIControlEvents.touchUpInside)
        UIApplication.shared.keyWindow?.rootViewController?.view.addSubview(tabView)
//        let tapGestureRecognizer1 = UITapGestureRecognizer(target: self, action: #selector(self.openAudio))
//        tabView.smallView.addGestureRecognizer(tapGestureRecognizer1)
//        tabView.progressSlider.addTarget(self, action: #selector(changeSlider), for: UIControlEvents.valueChanged)
//        tabView.isHidden = true

//        addPlayerItemObservers()
//        NotificationCenter.default.addObserver(
//            self,
//            selector: #selector(updateBarStyle),
//            name: Notification.Name(rawValue: "updateBarStyle"),
//            object: nil
//        )
    }
//    func openTabPlay(){
//        let tabView = CustomSmallPlayView()
//        let width = UIScreen.main.bounds.width
//        let height = self.view.bounds.height
//
//        var homeTabBarHeight: CGFloat = 0
//
//        homeTabBarHeight = UIDevice.current.setDifferentDeviceLayoutValue(iphoneXValue: 124, OtherIphoneValue: 90)
//
//        tabView.backgroundColor = UIColor(hex: "12a5b3", alpha: 0.5)
//        tabView.frame = CGRect(x:0,y:height - homeTabBarHeight,width:width,height:homeTabBarHeight)
//        UIApplication.shared.keyWindow?.rootViewController?.view.addSubview(tabView)
//        tabView.playAndPauseButton.addTarget(self, action: #selector(pauseOrPlay), for: UIControlEvents.touchUpInside)
//    }
    @objc func pauseOrPlay(sender: UIButton) {
        let  player = TabBarAudioContent.sharedInstance.player
        let  playerItem = TabBarAudioContent.sharedInstance.playerItem
        
        if (player != nil) {
            print("item11 palyer isExist \(String(describing: playerItem))")
            if player?.rate != 0 && player?.error == nil {
                print("palyer item pause)")
                tabView.playAndPauseButton.setImage(UIImage(named:"HomePlayBtn"), for: UIControlState.normal)
                TabBarAudioContent.sharedInstance.isPlaying = false
                player?.pause()
                
            } else {
                print("palyer item play)")
                tabView.playAndPauseButton.setImage(UIImage(named:"HomePauseBtn"), for: UIControlState.normal)
                TabBarAudioContent.sharedInstance.isPlaying = true
                
                player?.play()
                player?.replaceCurrentItem(with: playerItem)
                
            }
        }
    }
}

kCFBundleExecutableKey
    @objc func isHideAudio(sender: UISwipeGestureRecognizer){
        if sender.direction == .up{
            PlayerAPI.sharedInstance.fadeOutSmallPlayView()
            let customNavigation = self.navigationController as? CustomNavigationController
            if  let tabAudioView = customNavigation?.tabView{
                let deltaY = tabAudioView.bounds.height
                UIView.animate(withDuration: 1, delay: 0, options: UIViewAnimationOptions.curveEaseIn, animations: {
                    tabAudioView.transform = CGAffineTransform(translationX: 0,y: deltaY)
                    tabAudioView.setNeedsUpdateConstraints()
                }, completion: { (true) in

                })
            }

        }else if sender.direction == .down{
            PlayerAPI.sharedInstance.fadeInSmallPlayView()
            let customNavigation = self.navigationController as? CustomNavigationController
            if  let tabAudioView = customNavigation?.tabView{
                UIView.animate(withDuration: 1, delay: 0, options: UIViewAnimationOptions.curveEaseIn, animations: {
                    tabAudioView.transform = CGAffineTransform.identity
                    tabAudioView.setNeedsUpdateConstraints()
                }, completion: { (true) in

                })
            }
        }
    }

property-html核对电话：
        // function checkTel() {
    //   var obj = document.getElementById('client-number');
    //   var value = obj.value;
    //   var regTel2 = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(value);
    //   if (value !== '') { 
    //     if (!regTel2) { 
    //     //   alert('电话号码输入有误！');
    //       $('#client-number').val('');//清空内容 
    //       $('#client-number').attr('placeholder','请输入正确电话号码！');
    //       $('#client-number').css('background','#FFEC1A');
    //       return ;
    //     }
    //   }
    // //   alert('电话号码输入正确！');
    //   $('#client-number').css('background','#fff');
    //   return true;
    // }

    收藏按钮：
    fileprivate func checkLoveButton() {
        if let item = item {
        let key = "Saved clip"
        let savedItems = UserDefaults.standard.array(forKey: key) as? [[String: String]] ?? [[String: String]]()
        for savedItem in savedItems {
            if item.id == savedItem["id"] && item.type == savedItem["type"] {
                isSaved = true
                break
            }
        }
        if isSaved == true {
            loveButton.image = UIImage(named: "Delete")
        } else {
            loveButton.image = UIImage(named: "Clip")
        }
        }
    }
**2017.12.14**
    DOUAudioStreamer.setHintWith(url!)  对应 ：
     + (void)setHintWithAudioFile:(id <DOUAudioFile>)audioFile;
    + (instancetype)streamerWithAudioFile:(id <DOUAudioFile>)audioFile;
- (instancetype)initWithAudioFile:(id <DOUAudioFile>)audioFile;
- 对应：还不确定哪个对应哪个
- streamer = DOUAudioStreamer(audioFile: url)
- streamer = DOUAudioStreamer()

**2017.12.15**
<script>var gPageId = '<%$tag_name|default:$PageTitle%>';</script>
gPageId是什么？把所有变量研究透彻


    <!-- build:css styles/vendor.css -->
    <!-- bower:css -->
    <link rel="stylesheet" href="../bower_components/animate.css/animate.css" />
    <link rel="stylesheet" href="../bower_components/swiper/dist/css/swiper.css" />
    <!-- endbower -->
    <!-- endbuild -->

    <!-- build:css styles/page-maker.css -->
    <link rel="stylesheet" href="styles/main-page-maker.css">
    <!--<link rel="stylesheet" href="styles/main-page-innotree.css">-->
    <link rel="stylesheet" href="../bower_components/animate.css/animate.min.css">
    <!-- endbuild -->



